{"map":"{\"version\":3,\"sources\":[\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Profile/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/App/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/serviceWorker.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/index.js\"],\"names\":[\"GET_CURRENT_USER\",\"gql\",\"_templateObject\",\"Profile\",\"react_default\",\"a\",\"createElement\",\"react_apollo_esm\",\"query\",\"_ref\",\"data\",\"loading\",\"viewer\",\"name\",\"login\",\"App\",\"src_Profile\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"httpLink\",\"HttpLink\",\"uri\",\"headers\",\"authorization\",\"concat\",\"process\",\"cache\",\"InMemoryCache\",\"client\",\"ApolloClient\",\"link\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4ZAIA,IAAMA,QAAmBC,EAAAA,CAAHC,KA2BPC,EAlBC,WAAA,OACdC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOR,GACX,SAAAS,GAAuB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,QACAC,EAAWF,EAAXE,OAER,OAAID,IAAYC,EACPR,EAAAC,EAAAC,cAAA,MAAA,KAAA,eAIPF,EAAAC,EAAAC,cAAA,MAAA,KACGM,EAAOC,KADV,IACiBD,EAAOE,UCfjBC,mLAJX,OAAOX,EAAAC,EAAAC,cAACU,EAAD,aAFOC,EAAAA,WCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAEMC,EAAW,IAAIC,EAAAA,EAAS,CAC5BC,IAHsB,iCAItBC,QAAS,CACPC,cAAa,UAAAC,OACXC,+CAKAC,EAAQ,IAAIC,EAAAA,EAEZC,EAAS,IAAIC,EAAAA,EAAa,CAC9BC,KAAMX,EACNO,MAAAA,IAGFK,EAAAA,EAASC,OACPhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgByB,OAAQA,GACtB5B,EAAAC,EAAAC,cAAC+B,EAAD,MADF,KAGAC,SAASC,eAAe,SDiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport gql from 'graphql-tag';\\nimport { Query } from 'react-apollo';\\n\\nconst GET_CURRENT_USER = gql`\\n  {\\n    viewer {\\n      login\\n      name\\n    }\\n  }\\n`;\\n\\nconst Profile = () => (\\n  <Query query={GET_CURRENT_USER}>\\n    {({ data, loading }) => {\\n      const { viewer } = data;\\n\\n      if (loading || !viewer) {\\n        return <div>Loading ...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          {viewer.name} {viewer.login}\\n        </div>\\n      );\\n    }}\\n  </Query>\\n)\\n\\nexport default Profile;\",\"import React, { Component } from 'react';\\nimport Profile from '../Profile'\\n\\nclass App extends Component {\\n  render() {\\n    return <Profile />\\n  }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ApolloProvider } from 'react-apollo';\\nimport { ApolloClient } from 'apollo-client';\\nimport { HttpLink } from 'apollo-link-http';\\nimport { InMemoryCache } from 'apollo-cache-inmemory';\\nimport './style.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\\n\\nconst httpLink = new HttpLink({\\n  uri: GITHUB_BASE_URL,\\n  headers: {\\n    authorization: `bearer ${\\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\\n    }`,\\n  },\\n});\\n\\nconst cache = new InMemoryCache();\\n\\nconst client = new ApolloClient({\\n  link: httpLink,\\n  cache,\\n});\\n\\nReactDOM.render(\\n  <ApolloProvider client={client}>\\n    <App />, \\n  </ApolloProvider>,\\n  document.getElementById('root')\\n  );\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{41:function(n,e,t){n.exports=t(58)},46:function(n,e,t){},58:function(n,e,t){\"use strict\";t.r(e);var a=t(4),r=t.n(a),o=t(26),i=t.n(o),c=t(16),u=t(9),l=t(38),d=t(37),s=(t(46),t(27)),w=t(28),h=t(36),m=t(29),v=t(39),b=t(30),f=t(31);function p(){var n=Object(b.a)([\"\\n  {\\n    viewer {\\n      login\\n      name\\n    }\\n  }\\n\"]);return p=function(){return n},n}var g=t.n(f)()(p()),E=function(){return r.a.createElement(c.b,{query:g},function(n){var e=n.data,t=n.loading,a=e.viewer;return t||!a?r.a.createElement(\"div\",null,\"Loading ...\"):r.a.createElement(\"div\",null,a.name,\" \",a.login)})},j=function(n){function e(){return Object(s.a)(this,e),Object(h.a)(this,Object(m.a)(e).apply(this,arguments))}return Object(v.a)(e,n),Object(w.a)(e,[{key:\"render\",value:function(){return r.a.createElement(E,null)}}]),e}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var k=new l.a({uri:\"https://api.github.com/graphql\",headers:{authorization:\"bearer \".concat(\"11d0dcb31a70697107c1d4678678729a8d4f7ba5\")}}),O=new d.a,y=new u.a({link:k,cache:O});i.a.render(r.a.createElement(c.a,{client:y},r.a.createElement(j,null),\",\"),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(n){n.unregister()})}},[[41,1,2]]]);","extractedComments":[]}