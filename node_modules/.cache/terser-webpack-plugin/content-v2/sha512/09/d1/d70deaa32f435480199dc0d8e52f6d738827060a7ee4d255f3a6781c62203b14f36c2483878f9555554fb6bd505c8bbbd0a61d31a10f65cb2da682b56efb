{"map":"{\"version\":3,\"sources\":[\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Link/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Repository/RepositoryItem/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Repository/RepositoryList/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Loading/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/Profile/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/App/index.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/serviceWorker.js\",\"/Users/mcrawford/Code/React-with-GraphQL-Apollo/src/index.js\"],\"names\":[\"Link\",\"_ref\",\"children\",\"props\",\"Object\",\"objectWithoutProperties\",\"react_default\",\"a\",\"createElement\",\"assign\",\"target\",\"rel\",\"RepositoryItem\",\"name\",\"url\",\"descriptionHTML\",\"primaryLanguage\",\"owner\",\"stargazers\",\"watchers\",\"viewerSubscription\",\"viewerHasStarred\",\"className\",\"src_Link\",\"href\",\"totalCount\",\"dangerouslySetInnerHTML\",\"__html\",\"login\",\"RepositoryList\",\"repositories\",\"edges\",\"map\",\"_ref2\",\"node\",\"key\",\"id\",\"Repository_RepositoryItem\",\"Loading\",\"GET_REPOSITORIES_OF_CURRENT_USER\",\"gql\",\"_templateObject\",\"Profile\",\"react_apollo_esm\",\"query\",\"data\",\"loading\",\"viewer\",\"src_Loading\",\"Repository_RepositoryList\",\"repositorys\",\"App\",\"src_Profile\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"httpLink\",\"HttpLink\",\"uri\",\"headers\",\"authorization\",\"concat\",\"process\",\"cache\",\"InMemoryCache\",\"client\",\"ApolloClient\",\"link\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wVAQeA,EANF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAaC,EAAhBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,CAAA,aAAA,OACXK,EAAAC,EAAAC,cAAA,IAAAJ,OAAAK,OAAA,GAAON,EAAP,CAAcO,OAAO,SAASC,IAAI,wBAC/BT,IC4CUU,SA5CQ,SAAAX,GAAA,IACrBY,EADqBZ,EACrBY,KACAC,EAFqBb,EAErBa,IACAC,EAHqBd,EAGrBc,gBACAC,EAJqBf,EAIrBe,gBACAC,EALqBhB,EAKrBgB,MACAC,EANqBjB,EAMrBiB,WANqBjB,EAOrBkB,SAPqBlB,EAQrBmB,mBARqBnB,EASrBoB,iBATqB,OAWrBf,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,MAAA,CAAKc,UAAU,wBACbhB,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACe,EAAD,CAAMC,KAAMV,GAAMD,IAGpBP,EAAAC,EAAAC,cAAA,MAAA,CAAKc,UAAU,+BACZJ,EAAWO,WADd,WAKFnB,EAAAC,EAAAC,cAAA,MAAA,CAAKc,UAAU,8BACbhB,EAAAC,EAAAC,cAAA,MAAA,CAAKc,UAAU,kCAAkCI,wBAAyB,CAAEC,OAAQZ,KACpFT,EAAAC,EAAAC,cAAA,MAAA,CAAKc,UAAU,sCACbhB,EAAAC,EAAAC,cAAA,MAAA,KAEIQ,GACEV,EAAAC,EAAAC,cAAA,OAAA,KAAA,aAAiBQ,EAAgBH,OAIvCP,EAAAC,EAAAC,cAAA,MAAA,KAEIS,GACEX,EAAAC,EAAAC,cAAA,OAAA,KAAA,UAAaF,EAAAC,EAAAC,cAAA,IAAA,CAAGgB,KAAMP,EAAMH,KAAMG,EAAMW,cC5BvCC,SAPQ,SAAA5B,GAAA,OAAAA,EAAG6B,aACXC,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACrB5B,EAAAC,EAAAC,cAAA,MAAA,CAAK2B,IAAKD,EAAKE,GAAId,UAAU,kBAC3BhB,EAAAC,EAAAC,cAAC6B,EAAmBH,QCDXI,EAJC,WAAA,OACdhC,EAAAC,EAAAC,cAAA,MAAA,KAAA,osBCGF,IAAM+B,EAAmCC,GAAAA,CAAHC,KAqDvBC,EAlBC,WAAA,OACdpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,MAAOL,GAEV,SAAAtC,GAAuB,IAApB4C,EAAoB5C,EAApB4C,KAAMC,EAAc7C,EAAd6C,QACCC,EAAWF,EAAXE,OAER,OAAID,IAAYC,EACPzC,EAAAC,EAAAC,cAACwC,EAAD,MAIP1C,EAAAC,EAAAC,cAACyC,EAAD,CAAgBC,YAAaH,EAAOjB,kBC3C/BqB,mLAJX,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,aAFOC,EAAAA,WCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAEMC,EAAW,IAAIC,EAAAA,EAAS,CAC5BC,IAHsB,iCAItBC,QAAS,CACPC,cAAa,UAAAC,OACXC,+CAKAC,EAAQ,IAAIC,EAAAA,EAEZC,EAAS,IAAIC,EAAAA,EAAa,CAC9BC,KAAMX,EACNO,MAAAA,IAGFK,EAAAA,EAASC,OACPlE,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAgByB,OAAQA,GACtB9D,EAAAC,EAAAC,cAACiE,EAAD,MADF,KAGAC,SAASC,eAAe,SDiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\n\\nconst Link = ({ children, ...props }) => (\\n  <a {...props} target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\n    {children}\\n  </a>\\n);\\n\\nexport default Link;\",\"import React from 'react';\\nimport Link from '../../Link';\\nimport './RepositoryItem.css';\\n\\nconst RepositoryItem = ({\\n  name,\\n  url,\\n  descriptionHTML,\\n  primaryLanguage,\\n  owner,\\n  stargazers,\\n  watchers,\\n  viewerSubscription,\\n  viewerHasStarred,\\n}) => (\\n  <div>\\n    <div className=\\\"RepositoryItem-title\\\">\\n      <h2>\\n        <Link href={url}>{name}</Link>\\n      </h2>\\n\\n      <div className=\\\"RepositoryItem-title-action\\\">\\n        {stargazers.totalCount} Stars\\n      </div>\\n    </div>\\n\\n    <div className=\\\"RepositoryItem-description\\\">\\n      <div className=\\\"RepositoryItem-description-info\\\" dangerouslySetInnerHTML={{ __html: descriptionHTML }} />\\n      <div className=\\\"RepositoryItem-description-details\\\">\\n        <div>\\n          {\\n            primaryLanguage && (\\n              <span>Language: {primaryLanguage.name}</span>\\n            )\\n          }\\n        </div>\\n        <div>\\n          {\\n            owner && (\\n              <span>Owner: <a href={owner.url}>{owner.login}</a></span>\\n            )\\n          }\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n);\\n\\nexport default RepositoryItem\",\"import React from 'react'; \\nimport RepositoryItem from '../RepositoryItem';\\nimport './RepositoryList.css';\\n\\nconst RepositoryList = ({ repositories }) => \\n  repositories.edges.map(({ node }) => (\\n    <div key={node.id} className=\\\"RepositoryItem\\\">\\n      <RepositoryItem {...node} />\\n    </div>\\n  ));\\n\\nexport default RepositoryList\\n\\n\",\"import React from 'react'; \\n\\nconst Loading = () => (\\n  <div>Loading...</div>\\n)\\n\\nexport default Loading;\",\"import React from 'react';\\nimport gql from 'graphql-tag';\\nimport { Query } from 'react-apollo';\\nimport RepositoryList from '../Repository/RepositoryList';\\nimport Loading from '../Loading';\\n\\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\\n  {\\n    viewer {\\n      repositories(\\n        first: 5\\n        orderBy: { direction: DESC, field: STARGAZERS }\\n      ) {\\n        edges {\\n          node {\\n            id\\n            name\\n            url\\n            descriptionHTML\\n            primaryLanguage {\\n              name\\n            }\\n            owner {\\n              login\\n              url\\n            }\\n            stargazers {\\n              totalCount\\n            }\\n            viewerHasStarred\\n            watchers {\\n              totalCount\\n            }\\n            viewerSubscription\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n\\nconst Profile = () => (\\n  <Query query={GET_REPOSITORIES_OF_CURRENT_USER}>\\n    {\\n      ({ data, loading }) => {\\n        const { viewer } = data;\\n\\n        if (loading || !viewer) {\\n          return <Loading />;\\n        }\\n\\n        return (\\n          <RepositoryList repositorys={viewer.repositories} />\\n        );\\n      }\\n    }\\n  </Query>\\n)\\n\\nexport default Profile;\",\"import React, { Component } from 'react';\\nimport Profile from '../Profile'\\n\\nclass App extends Component {\\n  render() {\\n    return <Profile />\\n  }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ApolloProvider } from 'react-apollo';\\nimport { ApolloClient } from 'apollo-client';\\nimport { HttpLink } from 'apollo-link-http';\\nimport { InMemoryCache } from 'apollo-cache-inmemory';\\nimport './style.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\\n\\nconst httpLink = new HttpLink({\\n  uri: GITHUB_BASE_URL,\\n  headers: {\\n    authorization: `bearer ${\\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\\n    }`,\\n  },\\n});\\n\\nconst cache = new InMemoryCache();\\n\\nconst client = new ApolloClient({\\n  link: httpLink,\\n  cache,\\n});\\n\\nReactDOM.render(\\n  <ApolloProvider client={client}>\\n    <App />, \\n  </ApolloProvider>,\\n  document.getElementById('root')\\n  );\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{42:function(e,n,t){e.exports=t(61)},47:function(e,n,t){},48:function(e,n,t){},49:function(e,n,t){},61:function(e,n,t){\"use strict\";t.r(n);var a=t(2),r=t.n(a),i=t(26),o=t.n(i),c=t(16),l=t(9),s=t(37),u=t(38),m=(t(47),t(27)),d=t(28),p=t(36),v=t(29),w=t(39),E=t(30),f=t(31),h=t.n(f),g=t(40),b=function(e){var n=e.children,t=Object(g.a)(e,[\"children\"]);return r.a.createElement(\"a\",Object.assign({},t,{target:\"_blank\",rel:\"noopener noreferrer\"}),n)},y=(t(48),function(e){var n=e.name,t=e.url,a=e.descriptionHTML,i=e.primaryLanguage,o=e.owner,c=e.stargazers;e.watchers,e.viewerSubscription,e.viewerHasStarred;return r.a.createElement(\"div\",null,r.a.createElement(\"div\",{className:\"RepositoryItem-title\"},r.a.createElement(\"h2\",null,r.a.createElement(b,{href:t},n)),r.a.createElement(\"div\",{className:\"RepositoryItem-title-action\"},c.totalCount,\" Stars\")),r.a.createElement(\"div\",{className:\"RepositoryItem-description\"},r.a.createElement(\"div\",{className:\"RepositoryItem-description-info\",dangerouslySetInnerHTML:{__html:a}}),r.a.createElement(\"div\",{className:\"RepositoryItem-description-details\"},r.a.createElement(\"div\",null,i&&r.a.createElement(\"span\",null,\"Language: \",i.name)),r.a.createElement(\"div\",null,o&&r.a.createElement(\"span\",null,\"Owner: \",r.a.createElement(\"a\",{href:o.url},o.login))))))}),O=(t(49),function(e){return e.repositories.edges.map(function(e){var n=e.node;return r.a.createElement(\"div\",{key:n.id,className:\"RepositoryItem\"},r.a.createElement(y,n))})}),S=function(){return r.a.createElement(\"div\",null,\"Loading...\")};function j(){var e=Object(E.a)([\"\\n  {\\n    viewer {\\n      repositories(\\n        first: 5\\n        orderBy: { direction: DESC, field: STARGAZERS }\\n      ) {\\n        edges {\\n          node {\\n            id\\n            name\\n            url\\n            descriptionHTML\\n            primaryLanguage {\\n              name\\n            }\\n            owner {\\n              login\\n              url\\n            }\\n            stargazers {\\n              totalCount\\n            }\\n            viewerHasStarred\\n            watchers {\\n              totalCount\\n            }\\n            viewerSubscription\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);return j=function(){return e},e}var k=h()(j()),I=function(){return r.a.createElement(c.b,{query:k},function(e){var n=e.data,t=e.loading,a=n.viewer;return t||!a?r.a.createElement(S,null):r.a.createElement(O,{repositorys:a.repositories})})},R=function(e){function n(){return Object(m.a)(this,n),Object(p.a)(this,Object(v.a)(n).apply(this,arguments))}return Object(w.a)(n,e),Object(d.a)(n,[{key:\"render\",value:function(){return r.a.createElement(I,null)}}]),n}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var L=new s.a({uri:\"https://api.github.com/graphql\",headers:{authorization:\"bearer \".concat(\"11d0dcb31a70697107c1d4678678729a8d4f7ba5\")}}),N=new u.a,C=new l.a({link:L,cache:N});o.a.render(r.a.createElement(c.a,{client:C},r.a.createElement(R,null),\",\"),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[42,1,2]]]);","extractedComments":[]}